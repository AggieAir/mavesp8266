<!DOCTYPE html>
<html>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
* {
  box-sizing: border-box;
}

body {
  background-color: #f1f1f1;
}

#regForm {
  background-color: #ffffff;
  margin: 20px auto;
  font-family: Raleway;
  padding: 20px;
  width: 70%;
  min-width: 300px;
}

h1 {
  text-align: center;  
    margin-top: 10px;
    margin-bottom: 10px;
}

input {
  padding: 10px;
  width: 100%;
  font-size: 17px;
  font-family: Raleway;
  border: 1px solid #aaaaaa;
}

/* Mark input boxes that gets an error on validation: */
input.invalid {
  background-color: #ffdddd;
}

/* Hide all steps by default: */
.tab {
  display: none;
}

button {
  background-color: #4CAF50;
  color: #ffffff;
  border: none;
  padding: 10px 20px;
  font-size: 17px;
  font-family: Raleway;
  cursor: pointer;
}

button:hover {
  opacity: 0.8;
}

#prevBtn {
  background-color: #bbbbbb;
}

/* Make circles that indicate the steps of the form: */
.step {
  height: 15px;
  width: 15px;
  margin: 0 2px;
  background-color: #bbbbbb;
  border: none;  
  border-radius: 50%;
  display: inline-block;
  opacity: 0.5;
}

.step.active {
  opacity: 1;
}

.task {
  background-color: #f75f5f;
  color: #ffffff;
  border: none;
  padding: 20px 20px;
  font-size: 17px;
  font-family: Raleway;
  cursor: pointer;

}


/* Mark the steps that are finished and valid: */
.step.finish {
  background-color: #4CAF50;
}

.alignleft {
	float: left;
}
.alignright {
	float: right;
    font-size: 30px;
    padding: 0px 0px;
    top:50%;
    margin-top:-24px;
}

</style>
<body>
<h1><a href='/'>RFDesign TXMOD</a></h1>

<form id="regForm" action="/wiz" method="post" onclick="return false;">
  <h1>First Run Wizard:</h1>
  
  <font size=6>Tasks List:  &#10004;</font>
  <div id=r0 class="task"><div class="alignleft">Power on Radios and Link them</div><div id=t0 class="alignright">TODO &#65794;</div></div><p><p>
  <div id=r1 class="task"><div class="alignleft">Radio NetworkID change</div><div id=t1 class="alignright">TODO &#65794;</div></div><p><p>
  <div id=r2 class="task"><div class="alignleft">Encryption</div><div id=t2 class="alignright">TODO &#65794;</div></div><p><p>
  <div id=r3 class="task"><div class="alignleft">Enable PPM passthru</div><div id=t3 class="alignright">TODO &#65794;</div></div><p><p>
  <div id=r4 class="task"><div class="alignleft">Set PPM failsafe settings</div><div id=t4 class="alignright">TODO &#65794;</div></div><p><p>
  <div id=r5 class="task"><div class="alignleft">PPM failsafe test</div><div id=t5 class="alignright">TODO &#65794;</div></div><p><p>
  
    
  <!-- One "tab" for each step in the form: -->
  <div class="tab">Power on Radios and Link them:
    <p><button type="button" id="cc" onclick="">Please ensure both radios (900x) have a solid GREEN LED, then press Next.<br><br>We will test the link to be sure.... <br></button></p>
  </div>
  <div class="tab">Radio NetworkID change, matching in both Local and Remote radio:
    <p><input placeholder="Local/Remote Radio NetworkID ...(0-255)" oninput="this.className = ''" name="localC" id="localC"></p>
    <p><button type="button" id="cc" onclick="choosenetid()">I don't know, just pick one for me.</button></p>
  </div>
  <div class="tab">Enable Encryption by setting new encryption key in both Local and Remote radio:
    <p><input placeholder="To Enable Encryption, type '1' here, To Disable Encryption, type '0' here, or press a button below." oninput="this.className = ''" name="localEE" id="localEE"></p>
    <p><input placeholder="Local/Remote Radio Encryption Secret... (32 Hexadecimal characters only, no punctuation)" oninput="this.className = ''" name="localE" id="localE"></p>
    <p><button type="button" id="rs" onclick="enableencryption()">Enable Encryption</button> 
    <button type="button" id="rs" onclick="disableencryption()">Disable Encryption</button> 
    <button type="button" id="rs" onclick="randomisesecret()">Enable AND Pick a secret for me...</button></p>
  </div>
  <div class="tab">Enable PPM passthru ( PPMIN on local radio, PPMOUT on remote radio ):
    <p><input placeholder="Local Radio PPM IN..." oninput="this.className = ''" name="localPPMin" id="localPPMin" ></p>
    <p><input placeholder="Remote Radio PPM OUT..." oninput="this.className = ''" name="remotePPMOUT" id="remotePPMOUT"></p>
    <p><button type="button" id="rs" onclick="doppm(1)">Yes, Enable PPM passthru.</button>
    <button type="button" id="rs" onclick="doppm(0)">Disable PPM passthru.</button></p>
  </div>
  <div class="tab">Set PPM Failsafe?<br>
                This will allow you to RECORD a snapshot of the current incoming PPM stream (right now!)<br>
                 and it will be used as the DEFAULT for PPM output (vehicle side) when the <br>
                long-range 900x radio/s loose link, and the transmitter PPM isn't available.<br>
                <p>
                Please ensure your Sticks and switches are set in the position you want for FAILSAFE.<br>
                If using an Autopilot, we recommend RTL or Return-To-Launch. If Not, we recommend <br>
                setting/s that will keep your aircraft in slow circling stable flight for as long as possible.<br>
                <p>
                Press one of the buttons below, then Next to 'Save'...<br>
    <p><input placeholder="Remote Radio PPM FailSafe Default..." oninput="this.className = ''" name="remoteDefaultPPM" id="remoteDefaultPPM" style="visibility: hidden"></p>
    <p><button type="button" id="rs" onclick="doppmfailsafe(1)">Yes Record PPM steeam for PPM Failsafe for me when 'Next' is clicked.</button>
    <button type="button" id="rs" onclick="doppmfailsafe(0)">No, or I'm not using that feature.</button></p>
  </div>
  <div class="tab">Are your PPM failsafe settings actually tested?: <p>
                   Please don't turn your Transmitter or TXMOD off right now, <br>
                    or you won't be able to click Yes. :-) <p>
                    When this wizard is complete, please check what your aircraft <br>
                    actually does when the transmitter and TXMOD is turned OFF.<br>
 
    <p><input placeholder="Have you Tested what happens when your TXMOD and Transmitter are turned OFF..." oninput="this.className = ''" name="confirmtest" id="confirmtest"></p>
    <p><button type="button" id="rs" onclick="dotest()">Yes, I know this can crash my aircraft if I set it wrong.</button></p>

  </div>
  <div style="overflow:auto;">
    <div style="float:right;">
      <button type="button" id="prevBtn" onclick="attemptNextPrev(-1)">Previous</button>
      <button type="button" id="nextBtn" onclick="attemptNextPrev(1)">Next</button>
    </div>
  </div>
  <!-- Circles which indicates the steps of the form: -->
  <div style="text-align:center;margin-top:40px;">
    Steps:
    <span class="step"></span>
    <span class="step"></span>
    <span class="step"></span>
    <span class="step"></span>
  </div>
</form>

<script>
var currentTab = 0; // Current tab is set to be the first tab (0)
showTab(currentTab); // Display the crurrent tab


function showTab(n) {


  t = document.getElementById("t"+(currentTab-1));
  if ( t != null ) t.innerHTML = "DONE.&#10004;";

  r = document.getElementById("r"+(currentTab-1));
  if ( r != null )  r.style.backgroundColor='green'	;


  // This function will display the specified tab of the form...
  var x = document.getElementsByClassName("tab");
  x[n].style.display = "block";
  //... and fix the Previous/Next buttons:
  if (n == 0) {
    document.getElementById("prevBtn").style.display = "none";
  } else {
    document.getElementById("prevBtn").style.display = "inline";
  }
  if (n == (x.length - 1)) {
    

    document.getElementById("nextBtn").innerHTML = "Finish";
  } else {
    document.getElementById("nextBtn").innerHTML = "Next";
  }
  if (n == (x.length )) {

          t = document.getElementById("t"+(currentTab));
          if ( t != null ) t.innerHTML = "DONE.&#10004;";

          r = document.getElementById("r"+(currentTab));
          if ( r != null )  r.style.backgroundColor='green'	;


  }
  //... and run a function that will display the correct step indicator:
  fixStepIndicator(n);

}

// user requests, then we trigger ajax event, which actually changes tab with nextPrev on success.
var direction;
function attemptNextPrev(n) { 


  // Exit the function if any field in the current tab is invalid:
  if (n == 1 && !validateForm()) return false;

  direction = n; // save for after ajax so we know whih direction to move.

  // make Next button say "working"...
  if ( n == 1 ) {  // forward
      document.getElementById("nextBtn").innerHTML = "Working.....";
      document.getElementById("nextBtn").style.backgroundColor = "#e89b08";//orange

   // attempt ajax to server and this will hook the showTab to be done on return from that.
   // saveTab = currentTab; // incase we need to stay on current tab.
   // currentTab = currentTab + n; // try to increment/decrement
   sendData(currentTab + n);
  }
  if ( n == -1 ) {  // back
      document.getElementById("prevBtn").innerHTML = "Working.....";
      document.getElementById("prevBtn").style.backgroundColor = "#e89b08";//orange

   // don't attempt to hit the server on "previous" button, just change tab immediately
    nextPrev(direction);
  }



} 


function noTabChange(n,t) {

  alert("Sorry, somethings not right with the radio comms, please check and retry."+t);

  // make Next button say "working"...
  if ( n == 1 ) {  // forward
      document.getElementById("nextBtn").innerHTML = "Next";
      document.getElementById("nextBtn").style.backgroundColor = "#4CAF50";//green
  }
  if ( n == -1 ) {  // back
      document.getElementById("prevBtn").innerHTML = "Previous";
      document.getElementById("prevBtn").style.backgroundColor = "#4CAF50";//green
  }

}
function nextPrev(n) {

  // make Next button say "working"...
  if ( n == 1 ) {  // forward
      document.getElementById("nextBtn").innerHTML = "Next";
      document.getElementById("nextBtn").style.backgroundColor = "#4CAF50";//green
  }
  if ( n == -1 ) {  // back
      document.getElementById("prevBtn").innerHTML = "Previous";
      document.getElementById("prevBtn").style.backgroundColor = "#4CAF50";//green
  }

  // This function will figure out which tab to display
  var x = document.getElementsByClassName("tab");

  // Hide the current tab:
  x[currentTab].style.display = "none";

 // Increase or decrease the current tab by 1:
  currentTab = currentTab + n; // try to increment/decrement


  // if you have reached the end of the form...
  if (currentTab >= x.length) {
    // ... the form gets submitted:
    //document.getElementById("regForm").submit();

      document.getElementById("nextBtn").innerHTML = "WIZARD Is Completed, Thankyou.!";
      document.getElementById("nextBtn").style.backgroundColor = "#4c9caf";//blue gray.

        
         t = document.getElementById("t"+(currentTab-1));
          if ( t != null ) t.innerHTML = "DONE.&#10004;";

          r = document.getElementById("r"+(currentTab-1));
          if ( r != null )  r.style.backgroundColor='green'	;


    return false;
  }

  showTab(currentTab); // stay on current tab if the showTab() returns false.
}

function validateForm() {
  // This function deals with validation of the form fields
  var x, y, i, valid = true;
  x = document.getElementsByClassName("tab");
  y = x[currentTab].getElementsByTagName("input");
  // A loop that checks every input field in the current tab:
  for (i = 0; i < y.length; i++) {
    // If a field is empty...
    if (y[i].value == "") {
      // add an "invalid" class to the field:
      y[i].className += " invalid";
      // and set the current valid status to false
      valid = false;
    }
  }
  // If the valid status is true, mark the step as finished and valid:
  if (valid) {
    f = document.getElementsByClassName("step")[currentTab];
    if ( f != null ) f.className += " finish";
  }
  return valid; // return the valid status
}

function fixStepIndicator(n) {
  // This function removes the "active" class of all steps...
  var i, x = document.getElementsByClassName("step");
  for (i = 0; i < x.length; i++) {
    x[i].className = x[i].className.replace(" active", "");
  }
  //... and adds the "active" class on the current step:
  if ( x[n] != null ) x[n].className += " active";
}

function choosenetid() {  // 0-255
    document.getElementById("localC").value =  Math.floor((Math.random() * 255) );
} 

function disableencryption() { 

  // disable encryption
  document.getElementById("localEE").value = "0";
  document.getElementById("localE").value = " "; // overwrite the validator on the unused field.
 document.getElementById("localE").className = ''; // validator color too.
}
function enableencryption() { 

  // enable encryption
  document.getElementById("localEE").value = "1";
  document.getElementById("localE").value = "";
}
function randomisesecret() {  // random 32 hex characters string, 
 
  // enable encryption
  document.getElementById("localEE").value = "1";
 
  var text = "";
  var possible = "ABCDEF0123456789"; // hexadecimal.
  for (var i = 0; i < 32; i++) text += possible.charAt(Math.floor(Math.random() * possible.length));

  document.getElementById("localE").value = text;
} 
var did_user_enable_ppm_passthrough = -1
function doppm(state) { 

    did_user_enable_ppm_passthrough = state;

    document.getElementById("localPPMin").value =  state;
    document.getElementById("remotePPMOUT").value =  state;
} 

function doppmfailsafe(state) { 

    if ( state == 1 ) { 

        if ( did_user_enable_ppm_passthrough == 1 ) { 
            document.getElementById("remoteDefaultPPM").value =  1;
        } else { 
            alert("You have ppm-passthrough DISABLED on the previous page, I cant set the failsafe for you, please click No.");
            document.getElementById("remoteDefaultPPM").value =  0;
        } 
    } else { 
         document.getElementById("remoteDefaultPPM").value =  0;
    }

} 
function dotest() { 
    document.getElementById("confirmtest").value =  "Yes";
}

// Access the form element...
var form = document.getElementById("regForm");

// this is how we push form data to server
function sendData(page) {

    var XHR = new XMLHttpRequest();
    // Bind the FormData object and the form element
    var FD = new FormData(form);
    FD.append("page", page);
    // Define what happens on successful data submission
    XHR.addEventListener("load", function(event) {
      //alert(event.target.responseText);

        var t = event.target.responseText;
        if ( t.startsWith("SUCCESS")) {
         nextPrev(direction);
         return;
        }
        if ( t.includes("Saved")) {
         nextPrev(direction);
         return;
        }
        noTabChange(direction,t);
        return;

    });
    // Define what happens in case of error
    XHR.addEventListener("error", function(event) {
      alert('Oops! Something went wrong.');
    });
    // Set up our request
    XHR.open("POST", "/wiz");
    // The data sent is what the user provided in the form
    XHR.send(FD);
};


// on-page-load setup this....
window.addEventListener("load", function () {

  // ...and take over its submit event for that too. 
  form.addEventListener("submit", function (event) {
    event.preventDefault();

    sendData(6);
  });
});

</script>

</body>
</html>


